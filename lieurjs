#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import os from 'os';
import { exec } from 'child_process';
import chokidar from 'chokidar';
import http from 'http';
import { fileURLToPath, pathToFileURL } from 'url';
import './core/LiveReload.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const args = process.argv.slice(2);

const templates = {
  controller: name => `export default class ${name} {
  index(req, res) {
    res.end("${name} Controller");
  }
}`,
  model: name => `import Model from '../core/Model.js';
export default class ${name} extends Model {
  constructor() {
    super('${name.toLowerCase()}s');
  }
}`
};

if (args[0] === 'make:controller') {
  const name = args[1];
  const content = templates.controller(name);
  fs.writeFileSync(`controllers/${name}.js`, content);
  console.log(`✅ Controller ${name}.js dibuat.`);
  process.exit();
}

if (args[0] === 'make:model') {
  const name = args[1];
  const content = templates.model(name);
  fs.writeFileSync(`models/${name}.js`, content);
  console.log(`✅ Model ${name}.js dibuat.`);
  process.exit();
}

const router = async (req, res) => {
  if (req.url === '/') {
    const Home = await import('./controllers/HomeController.js');
    return new Home.default().index(req, res);
  }

  if (req.url === '/favicon.ico') {
    const iconPath = path.join(__dirname, 'public', 'favicon.ico');
    if (fs.existsSync(iconPath)) {
      const icon = fs.readFileSync(iconPath);
      res.writeHead(200, { 'Content-Type': 'image/x-icon' });
      return res.end(icon);
    }
    res.writeHead(404); return res.end();
  }

  res.writeHead(404); res.end('404 Not Found');
};

const server = http.createServer((req, res) => router(req, res));
server.listen(3000, () => {
  const url = 'http://localhost:3000';
  console.log(`✅ Server berjalan di ${url}`);
  const p = os.platform();
  if (p === 'win32') exec(`start ${url}`);
  else if (p === 'darwin') exec(`open ${url}`);
  else exec(`xdg-open ${url}`);
});

chokidar.watch(['controllers/', 'models/', 'views/'], {
  ignored: /node_modules/
}).on('change', file => {
  console.log(`🔁 Reload karena perubahan: ${file}`);
  import('./core/LiveReload.js').then(mod => mod.reloadAllClients());
});
